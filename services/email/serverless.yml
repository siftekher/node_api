# NOTE: update this with your service name
service: rfx-webapp-cp-api-email

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  secrets: ${file(secrets.json)}
  customDomain:
    domainName: 'webcp-api.remitfx.io' # Change this to your domain.
    basePath: 'email' # This will be prefixed to all routes
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-1
  profile: ctin
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DOMAIN: ${self:custom.secrets.DOMAIN}
    SERVICE_NAME: ${self:service}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - rds:*
        - "ses:SendEmail"
      Resource: "*"

functions:
  test:
    handler: src/test.main
    events:
      - http:
          path: test
          method: post
          cors: true
          authorizer: aws_iam
  client_ident_doc_uploaded:
    handler: src/client.identification_document_uploaded
    events:
      - http:
          path: client/identification-document-uploaded
          method: post
          cors: true
          authorizer: aws_iam

  interaction:
    handler: src/interaction.main
    events:
      - http:
          path: interaction/main
          method: post
          cors: true
  client_send_remit_inst:
    handler: src/client.send_remittance_instructions
    events:
      - http:
          path: client/remittance-instructions
          method: post
          cors: true
          authorizer: aws_iam